const Question = require('../models/Question');

exports.getQuestions = async (req, res) => {
  const { mode, subtopic } = req.query;
  try {
    const questions = await Question.getQuestionsByModeAndTopic(mode, subtopic);
    res.json(questions);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.getRandomQuestions = async (req, res) => {
  const { mode, quizMode, limit } = req.query;
  console.log('üé≤ getRandomQuestions - Received params:', { mode, quizMode, limit });
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const totalQuestions = await Question.getQuestionCountByDifficulty(mode);
    console.log('üé≤ getRandomQuestions - Total questions in DB for difficulty', mode, ':', totalQuestions);
    
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ limit = 30 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à parameter ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
    const questionLimit = 30;
    console.log('üé≤ getRandomQuestions - FORCING limit to:', questionLimit, '(ignoring request limit)');
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const actualLimit = Math.min(questionLimit, totalQuestions);
    console.log('üé≤ getRandomQuestions - Actual limit to use:', actualLimit);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ model ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á limit = 30 ‡πÅ‡∏ö‡∏ö‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á
    const questions = await Question.getRandomQuestions(mode, quizMode, 30);
    console.log('üé≤ getRandomQuestions - Returned questions count:', questions.length);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏Ç‡πâ‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà
    if (questions.length < 30 && totalQuestions >= 30) {
      console.log('üé≤ getRandomQuestions - Retrying to get 30 questions...');
      const retryQuestions = await Question.getRandomQuestions(mode, quizMode, 30);
      console.log('üé≤ getRandomQuestions - Retry returned:', retryQuestions.length, 'questions');
      res.json(retryQuestions);
    } else {
      res.json(questions);
    }
  } catch (error) {
    console.error('üé≤ getRandomQuestions - Error:', error);
    res.status(500).json({ error: error.message });
  }
};

exports.updateQuestion = async (req, res) => {
  const { id } = req.params;
  const { titleTh, options, difficulty, subtopic, correct_answer, explanation } = req.body;
  try {
    await Question.updateQuestion(id, { titleTh, options, difficulty, subtopic, correct_answer, explanation });
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.getAllQuestions = async (req, res) => {
  try {
    const questions = await Question.getAllQuestions();
    res.json(questions);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};